<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * @ignore
 */

echo $this->partial('partials/kb/sideNav.phtml');
?>
<div class="tabContent">
    <h2>Modules</h2>
    <div class="tabItem">
        <h3>Kaltura MediaSpace Module Structure</h3>
        <p>A module of MediaSpace is an implementation of MVC web application, based on Zend-Framework folder structure and naming convention.</p>
        <p>Following is the folder structure of a MediaSpace module including typical files in each folder.</p>
        <p>In the below example, replace "{module}" with the name of your module, notice that the replacement should be case-sensitive, so if you see {Module} and your module's name is test you should replace with Test.</p>
        <pre>
{module}/
         controllers/
                     IndexController.php
         models/
                {Module}.php --- the model file of the module, without it the module will not be functional at all
         views/
               scripts/
                       index/ --- as the name of the controller we defined
                             index.phtml --- view script for indexAction within IndexController
                             other.phtml --- view script for otherAction within IndexController
         assets/ --- css, js and images to be used by the module.
         default.ini --- default settings file of the module.
         admin.ini --- settings file of the module to expose configuration options in configuration management UI
         module.info --- information file of the module to present data in configuration management UI
        </pre>

        <p />
    </div>
    <div class="tabItem">
        <h3>Model Class</h3>
        <p>The model class in a MediaSpace module is responsible for "declaring" each and every feature the module extends.</p>
        <p>Extending a MediaSpace feature through a module is done by implementing one of the <a href="<?php echo $this->baseUrl('kb/tab/interfaces'); ?>">interfaces</a> that are available in MediaSpace.</p>
        <p>Your model class should implement any of the interfaces, according to the features you would like to provide through your module.</p>
        <p>A basic model class of the 'mymodule' module would look like the following:</p>
        <pre>
class Mymodule_Model_Mymodule extends Kms_Module_BaseModel
{
}
        </pre>
        <p>The abstract class Kms_Module_BaseModel implements 2 interfaces:
            <ul>
                <li>Kms_Interface_Model_ViewHook - allows modules to provide their HTML output to be included in core views of MediaSpace.</li>
                <li>Kms_Interface_Access - every module that has a controller must declare the access rules for its actions to integrate with MediaSpace's roles.</li>
            </ul>
        </p>
    </div>
    <div class="tabItem">
        <h3>Additional NameSpaces</h3>
        <p>If you need to add additional independent classes to your module, you can store them in one of the following namespaces that mediaspace includes as part of the auto-loading process.</p>
        <p>Note that you have to keep ZF naming convention so files will be found by the autoloader.</p>
        <ul>
            <li>plugins</li>
            <li>services</li>
            <li>views/helpers</li>
        </ul>
        <p>For example, if you want to add a class which communicates with a 3rd party API (i.e. service) you should add your file under 'services' folder (in your module).</p>
        <p>Your folder/file structure would look like:</p>
        <pre>
{module}/
         controllers/
                     ...
         models/
                {module}.php
         views/
               scripts/
                       ...
         assets/
                ...                       
         services/
                  Thirdparty.php
         admin.ini
         default.ini
         module.info
        </pre>
        <p>Your class name would look like:</p>
        <pre>
class {Module}_Service_Thirdparty
{
}
        </pre>
        <p>Note that {Module} should be replaced with the name of your module with the first character in upper case.</p>
    </div>
    <div class="tabItem">
        <h3>Module Assets</h3>
        <p>Modules can contain js, css, flv, and image files to be used in their views. The files are located in the module's 'assets' folder.</p>
        <p>To access the files, use a url of the form:</p>
        <pre>http://[kms url]/[build number]/[module name]/asset/[file name]</pre>
    </div>    
    <h2>View Hooks</h2>
    <div class="tabItem">
        <p>Modules are allowed to add HTML content to different locations in KMS pages.</p>
        <p>This capability, in KMS, is called "View Hook" - the ability to hook into an existing view and adding output to that view.</p>
        <p>This is built in a way that KMS invokes (internally) page requests and uses the response as the HTML that is added in the "core" view script.</p>
        <p>A module that implements viewhook must have, at least, the following:</p>
        <ul>
            <li>Model class
                <ul>
                    <li>&nbsp;&nbsp;&nbsp;Declares which view hooks are implemented by the module. For each viewhook - specify which action and controller of the module should be invoked, and the importance order between other modules implementing the same viewhook.</li>
                    <li>&nbsp;&nbsp;&nbsp;Set access rules for any of the controllers and actions provided by the module.</li>
                </ul>
            </li>
            <li>At least one controller - to expose actions that are invoked as viewhooks.</li>
            <li>Relevant view scripts to serve as the output for each of the actions.</li>
        </ul>
    </div>
    <h2>Themes</h2>
    <div class="tabItem">
        <p>MediaSpace allows creating themes to override the generic view scripts of the application.</p>
        <p>A custom theme can override some or all of the generic view scripts of MediaSpace. A view script which is not implemented in the custom theme will be taken from the generic view scripts.</p>
        <p>A theme includes two sets of folders, as follows:</p>
        <pre>
{mediaspace install path}/
                          themes/
                                 {custom theme folder}
                          public/themes/
                                        {custom theme folder}
        </pre>
        <p>Under the main themes folder (below mediaspace installation path) should be implemented all the different view scripts that a custom theme wishes to override</p>
        <p>Under the public themes folder (public/themes) should be placed all of the theme assets (images, css files and javascript files) which should be accessible via the web.</p>
        <p>Folder structure of a theme should reflect the same folder structure of the different views and layouts scripts.</p>
        <pre>
{themename}/views/scripts/
{themename}/views/scripts/playlist/
{themename}/views/scripts/install/
{themename}/views/scripts/redirector/
{themename}/views/scripts/partials/
{themename}/views/scripts/partials/mymedia/
{themename}/views/scripts/partials/upload/
{themename}/views/scripts/partials/myplaylists/
{themename}/views/scripts/partials/admin/
{themename}/views/scripts/partials/channels/
{themename}/views/scripts/partials/entryItem/
{themename}/views/scripts/partials/widgets/
{themename}/views/scripts/category/
{themename}/views/scripts/channels/
{themename}/views/scripts/gallery/
{themename}/views/scripts/error/
{themename}/views/scripts/user/
{themename}/views/scripts/index/
{themename}/views/scripts/entry/
{themename}/layouts/scripts/
        </pre>
        <p>In addition, a theme can also override view scripts of the different modules.</p>
        <p>Refer to <a href="<?php echo $this->baseUrl('kb/viewfiles'); ?>">list of view scripts</a> available in MediaSpace</p>
    </div>
     <div class="tabItem">
        <h3>Info file</h3>
        <p>Themes can include an optional file called theme.info, containing a short description of the theme. </p>
        <pre>
{themename}/theme.info
        </pre>
     </div>
</div>
